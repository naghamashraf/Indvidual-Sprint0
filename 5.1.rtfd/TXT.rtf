{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fnil\fcharset0 Georgia;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red61\green52\blue46;\red234\green54\blue39;\red16\green117\blue149;
\red38\green38\blue38;\red234\green234\blue234;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl880\sa288

\f0\fs72 \cf2 5.1 Distributed Git - Distributed Workflows\
\pard\pardeftab720\sl440\sa220

\f1\fs28 \cf2 Now that you have a remote Git repository set up as a focal point for all the developers to share their code, and you\'92re familiar with basic Git commands in a local workflow, you\'92ll look at how to utilize some of the distributed workflows that Git affords you.\
In this chapter, you\'92ll see how to work with Git in a distributed environment as a contributor and an integrator. That is, you\'92ll learn how to contribute code successfully to a project and make it as easy on you and the project maintainer as possible, and also how to maintain a project successfully with a number of developers contributing.\
\pard\pardeftab720\sl880

\f0\b\fs36 \cf3 Distributed Workflows\
\pard\pardeftab720\sl440\sa220

\f1\b0\fs28 \cf2 Unlike Centralized Version Control Systems (CVCSs), the distributed nature of Git allows you to be far more flexible in how developers collaborate on projects. In centralized systems, every developer is a node working more or less equally on a central hub. In Git, however, every developer is potentially both a node and a hub\uc0\u8201 \'97\u8201 that is, every developer can both contribute code to other repositories and maintain a public repository on which others can base their work and which they can contribute to. This opens a vast range of workflow possibilities for your project and/or your team, so we\'92ll cover a few common paradigms that take advantage of this flexibility. We\'92ll go over the strengths and possible weaknesses of each design; you can choose a single one to use, or you can mix and match features from each.\
\pard\pardeftab720\sl660

\f0\b\fs32 \cf2 Centralized Workflow\
\pard\pardeftab720\sl440\sa220

\f1\b0\fs28 \cf2 In centralized systems, there is generally a single collaboration model\uc0\u8201 \'97\u8201 the centralized workflow. One central hub, or\'a0
\i repository
\i0 , can accept code, and everyone synchronizes their work to it. A number of developers are nodes\uc0\u8201 \'97\u8201 consumers of that hub\u8201 \'97\u8201 and synchronize to that one place.\
\pard\pardeftab720

\fs24 \cf0 \pard\pardeftab720

\f0\fs28 \cf2 \
Figure 54. Centralized workflow.\
\pard\pardeftab720\sl440\sa220

\f1 \cf2 This means that if two developers clone from the hub and both make changes, the first developer to push their changes back up can do so with no problems. The second developer must merge in the first one\'92s work before pushing changes up, so as not to overwrite the first developer\'92s changes. This concept is as true in Git as it is in Subversion (or any CVCS), and this model works perfectly well in Git.\
If you are already comfortable with a centralized workflow in your company or team, you can easily continue using that workflow with Git. Simply set up a single repository, and give everyone on your team push access; Git won\'92t let users overwrite each other. Say John and Jessica both start working at the same time. John finishes his change and pushes it to the server. Then Jessica tries to push her changes, but the server rejects them. She is told that she\'92s trying to push non-fast-forward changes and that she won\'92t be able to do so until she fetches and merges. This workflow is attractive to a lot of people because it\'92s a paradigm that many are familiar and comfortable with.\
This is also not limited to small teams. With Git\'92s branching model, it\'92s possible for hundreds of developers to successfully work on a single project through dozens of branches simultaneously.\
\pard\pardeftab720\sl660

\f0\b\fs32 \cf2 Integration-Manager Workflow\
\pard\pardeftab720\sl440\sa220

\f1\b0\fs28 \cf2 Because Git allows you to have multiple remote repositories, it\'92s possible to have a workflow where each developer has write access to their own public repository and read access to everyone else\'92s. This scenario often includes a canonical repository that represents the \'93official\'94 project. To contribute to that project, you create your own public clone of the project and push your changes to it. Then, you can send a request to the maintainer of the main project to pull in your changes. The maintainer can then add your repository as a remote, test your changes locally, merge them into their branch, and push back to their repository. The process works as follows (see\'a0{\field{\*\fldinst{HYPERLINK "https://git-scm.com/book/en/v2/ch00/wfdiag_b"}}{\fldrslt \cf4 Integration-manager workflow.}}):\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\sa220
\ls1\ilvl0\cf2 {\listtext	1.	}The project maintainer pushes to their public repository.\
{\listtext	2.	}A contributor clones that repository and makes changes.\
{\listtext	3.	}The contributor pushes to their own public copy.\
{\listtext	4.	}The contributor sends the maintainer an email asking them to pull changes.\
{\listtext	5.	}The maintainer adds the contributor\'92s repository as a remote and merges locally.\
{\listtext	6.	}The maintainer pushes merged changes to the main repository.\
\pard\pardeftab720

\fs24 \cf0 
\f0\fs28 \cf2 \
Figure 55. Integration-manager workflow.\
\pard\pardeftab720\sl440\sa220

\f1 \cf2 This is a very common workflow with hub-based tools like GitHub or GitLab, where it\'92s easy to fork a project and push your changes into your fork for everyone to see. One of the main advantages of this approach is that you can continue to work, and the maintainer of the main repository can pull in your changes at any time. Contributors don\'92t have to wait for the project to incorporate their changes\uc0\u8201 \'97\u8201 each party can work at their own pace.\
\pard\pardeftab720\sl660

\f0\b\fs32 \cf2 Dictator and Lieutenants Workflow\
\pard\pardeftab720\sl440\sa220

\f1\b0\fs28 \cf2 This is a variant of a multiple-repository workflow. It\'92s generally used by huge projects with hundreds of collaborators; one famous example is the Linux kernel. Various integration managers are in charge of certain parts of the repository; they\'92re called\'a0
\i lieutenants
\i0 . All the lieutenants have one integration manager known as the benevolent dictator. The benevolent dictator pushes from his directory to a reference repository from which all the collaborators need to pull. The process works like this (see\'a0{\field{\*\fldinst{HYPERLINK "https://git-scm.com/book/en/v2/ch00/wfdiag_c"}}{\fldrslt \cf4 Benevolent dictator workflow.}}):\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\sa220
\ls2\ilvl0\cf2 {\listtext	1.	}Regular developers work on their topic branch and rebase their work on top of\'a0
\f2 \cf5 \cb6 master
\f1 \cf2 \cb1 . The\'a0
\f2 \cf5 \cb6 master
\f1 \cf2 \cb1 \'a0branch is that of the reference directory to which the dictator pushes.\
{\listtext	2.	}Lieutenants merge the developers' topic branches into their\'a0
\f2 \cf5 \cb6 master
\f1 \cf2 \cb1 \'a0branch.\
{\listtext	3.	}The dictator merges the lieutenants'\'a0
\f2 \cf5 \cb6 master
\f1 \cf2 \cb1 \'a0branches into the dictator\'92s\'a0
\f2 \cf5 \cb6 master
\f1 \cf2 \cb1 \'a0branch.\
{\listtext	4.	}Finally, the dictator pushes that\'a0
\f2 \cf5 \cb6 master
\f1 \cf2 \cb1 \'a0branch to the reference repository so the other developers can rebase on it.\
\pard\pardeftab720

\fs24 \cf0 
\f0\fs28 \cf2 \
Figure 56. Benevolent dictator workflow.\
\pard\pardeftab720\sl440\sa220

\f1 \cf2 This kind of workflow isn\'92t common, but can be useful in very big projects, or in highly hierarchical environments. It allows the project leader (the dictator) to delegate much of the work and collect large subsets of code at multiple points before integrating them.\
\pard\pardeftab720\sl660

\f0\b\fs32 \cf2 Workflows Summary\
\pard\pardeftab720\sl440\sa220

\f1\b0\fs28 \cf2 These are some commonly used workflows that are possible with a distributed system like Git, but you can see that many variations are possible to suit your particular real-world workflow. Now that you can (hopefully) determine which workflow combination may work for you, we\'92ll cover some more specific examples of how to accomplish the main roles that make up the different flows. In the next section, you\'92ll learn about a few common patterns for contributing to a project.\
}